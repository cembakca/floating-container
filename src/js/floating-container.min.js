/*
 * Floating Container
 * Copyright 2020
 * Author: Cem Bakca
 * All Rights Reserved.
 * Use, reproduction, distribution, and modification of this code is subject to the terms and
 * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php
 *
 * Project: https://github.com/cembakca/floating-container
 */
const controlsHtml='\n  <div class="fc-controls">\n    <span class="fc-putback">&#10094;</span>\n    <span class="fc-close">&#10005;</span>\n  </div>\n';class FloatingContainer{constructor(e={}){this.observableElementTag="VIDEO",this.observer=null,this.options=Object.assign({container:"#fc-container",wrapper:"#fc-wrapper",selector:"#fc-selector",direction:"bottom-right",escapeHeight:50,showControllers:!0,observerOptions:{threshold:0},onCloseFC:()=>{},onPutBackFC:()=>{},startPreviewFC:()=>{},endPreviewFC:()=>{},notSupportedCallback:()=>{}},e),this.initialize()}initialize(){if("undefined"==typeof window||!window.IntersectionObserver)return this.options.notSupportedCallback(),void console.warn("IntersectionObserver is not supported by your browser, so you can't see the effect.");if(this.containerElement=document.querySelector(this.options.container),this.wrapperElement=document.querySelector(this.options.wrapper),this.selectorElement=document.querySelector(this.options.selector),!this.containerElement||!this.wrapperElement||!this.selectorElement)return void console.warn("NODE definitions required for operation not found.");if(document.querySelector(".fc-appear"))console.warn("This process is already implemented for a container.");else{if(this.options.showControllers){this.wrapperElement.innerHTML+=controlsHtml;const e=this.containerElement.querySelector(".fc-close"),t=this.containerElement.querySelector(".fc-putback");e.addEventListener("click",this.handleCloseFC.bind(this)),t.addEventListener("click",this.handlePutBackFC.bind(this))}this.wrapperElement.classList.add(this.options.direction),this.observer=this.observer||this.createObserver(),"VIDEO"==this.selectorElement.tagName?this.selectorElement.onloadeddata=(()=>{this.containerElement=document.querySelector(this.options.container),this.observableElementTag="VIDEO",this.observer.observe(this.containerElement)}):"IMG"==this.selectorElement.tagName?this.selectorElement.onload=(()=>{this.containerElement=document.querySelector(this.options.container),this.observableElementTag="IMG",this.observer.observe(this.containerElement)}):(this.observableElementTag="GENERIC",this.observer.observe(this.containerElement))}}handleCloseFC(e){e.preventDefault(),this.containerElement.classList.remove("fc-appear"),window.scrollTo({top:this.containerElement.offsetTop-this.options.escapeHeight,behavior:"smooth"}),this.options.onCloseFC(e,this.containerElement)}handlePutBackFC(e){e.preventDefault(),this.containerElement.classList.remove("fc-appear"),window.scrollTo({top:this.containerElement.offsetTop-this.options.escapeHeight,behavior:"smooth"}),this.options.onPutBackFC(e,this.containerElement)}createObserver(){const e=this;return new IntersectionObserver(function(t,o){t.forEach(o=>{o.isIntersecting?(o.target.classList.remove("fc-appear"),o.target.style.height="auto",e.options.endPreviewFC(o,t)):(o.target.style.height=`${o.target.offsetHeight}px`,o.target.classList.add("fc-appear"),e.options.startPreviewFC(o,t))})},{...e.options.observerOptions})}}export default FloatingContainer;